{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","input","handleClick","bind","handleKeyPress","document","addEventListener","this","removeEventListener","e","code","getElementById","play","setState","event","target","lastChild","id","className","onClick","src","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9325bc86.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: \"\",\n    }\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  \n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress); \n  }  \n  \n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n  \n  handleKeyPress(e) {\n    if (e.code == \"KeyQ\") {\n      document.getElementById(\"Q\").play()\n      this.setState({\n        input: \"heater-1\"\n      })\n    } else if (e.code == \"KeyW\") {\n      document.getElementById(\"W\").play()\n      this.setState({\n        input: \"heater-2\"\n      })\n    } else if (e.code == \"KeyE\") {\n      document.getElementById(\"E\").play()\n      this.setState({\n        input: \"heater-3\"\n      })\n    } else if (e.code == \"KeyA\") {\n      document.getElementById(\"A\").play()\n      this.setState({\n        input: \"heater-4\"\n      })\n    } else if (e.code == \"KeyS\") {\n      document.getElementById(\"S\").play()\n      this.setState({\n        input: \"clap\"\n      })\n    } else if (e.code == \"KeyD\") {\n      document.getElementById(\"D\").play()\n      this.setState({\n        input: \"open-haha\"\n      })\n    } else if (e.code == \"KeyZ\") {\n      document.getElementById(\"Z\").play()\n      this.setState({\n        input: \"Kick_n_Hat\"\n      })\n    } else if (e.code == \"KeyX\") {\n      document.getElementById(\"X\").play()\n      this.setState({\n        input: \"kick\"\n      })\n    } else if (e.code == \"KeyC\") {\n      document.getElementById(\"C\").play()\n      this.setState({\n        input: \"close-haha\"\n      })\n    }\n    \n  }  \n  \n  handleClick(event) {\n    event.target.lastChild.play()\n    this.setState({\n      input: event.target.id\n    })\n  }\n\n  \n  \n  render() {\n    return(\n      <div>\n      <div className=\"header\"><h1>Drum Machine</h1></div>\n      <div id=\"drum-machine\">\n      <div id=\"display\">\n      {this.state.input}\n      </div>\n\n\n      <div className=\"buttons\">\n      <button className=\"drum-pad\" id=\"heater-1\" onClick={this.handleClick} >Q <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\" className=\"clip\" id=\"Q\"></audio></button>\n      <button className=\"drum-pad\" id=\"heater-2\" onClick={this.handleClick}>W <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" className=\"clip\" id=\"W\"></audio></button>\n      <button className=\"drum-pad\" id=\"heater-3\" onClick={this.handleClick}>E <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\" className=\"clip\" id=\"E\"></audio></button>\n      <button className=\"drum-pad\" id=\"heater-4\" onClick={this.handleClick}>A <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\" className=\"clip\" id=\"A\"></audio></button>\n      <button className=\"drum-pad\" id=\"clap\" onClick={this.handleClick}>S <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\" className=\"clip\" id=\"S\"></audio></button>\n      <button className=\"drum-pad\" id=\"open-haha\" onClick={this.handleClick}>D <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\" className=\"clip\" id=\"D\"></audio></button>\n      <button className=\"drum-pad\" id=\"Kick_n_Hat\" onClick={this.handleClick}>Z <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\" className=\"clip\" id=\"Z\"></audio></button>\n      <button className=\"drum-pad\" id=\"kick\" onClick={this.handleClick}>X <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\" className=\"clip\" id=\"X\"></audio></button>\n      <button className=\"drum-pad\" id=\"close-haha\" onClick={this.handleClick}>C <audio src=\"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\" className=\"clip\" id=\"C\"></audio></button>\n      </div>\n\n\n      </div>\n      </div>\n      )\n    }\n  }\n\n  export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}